/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { A, Z, ZERO, NINE, SPACE, } from '@angular/cdk/keycodes';
export class MatSelectFilterComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.showSpinner = true;
        this.noResultsMessage = 'No results';
        this.noResults = false;
        this.localSpinner = false;
        this.filteredReturn = new EventEmitter();
        this.filteredItems = [];
        this.searchForm = fb.group({
            value: ''
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.searchForm.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (this.showSpinner) {
                this.localSpinner = true;
            }
            if (value['value']) {
                // IF THE DISPLAY MEMBER INPUT IS SET WE CHECK THE SPECIFIC PROPERTY
                if (this.displayMember == null) {
                    this.filteredItems = this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    name => name.toLowerCase().includes(value['value'].toLowerCase())));
                    // OTHERWISE, WE CHECK THE ENTIRE STRING
                }
                else if (this.hasGroup && this.groupArrayName && this.displayMember) {
                    this.filteredItems = this.array.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const objCopy = Object.assign({}, a);
                        objCopy[this.groupArrayName] = objCopy[this.groupArrayName].filter((/**
                         * @param {?} g
                         * @return {?}
                         */
                        g => g[this.displayMember].toLowerCase().includes(value['value'].toLowerCase())));
                        return objCopy;
                    })).filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x[this.groupArrayName].length > 0));
                }
                else {
                    this.filteredItems = this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    name => name[this.displayMember].toLowerCase().includes(value['value'].toLowerCase())));
                }
                // NO RESULTS VALIDATION
                this.noResults = this.filteredItems == null || this.filteredItems.length === 0;
            }
            else {
                this.filteredItems = this.array.slice();
                this.noResults = false;
            }
            this.filteredReturn.emit(this.filteredItems);
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.showSpinner) {
                    this.localSpinner = false;
                }
            }), 2000);
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.input.nativeElement.focus();
        }), 500);
        if (!this.placeholder) {
            this.placeholder = 'Search...';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeydown(event) {
        // PREVENT PROPAGATION FOR ALL ALPHANUMERIC CHARACTERS IN ORDER TO AVOID SELECTION ISSUES
        if ((event.key && event.key.length === 1) ||
            (event.keyCode >= A && event.keyCode <= Z) ||
            (event.keyCode >= ZERO && event.keyCode <= NINE) ||
            (event.keyCode === SPACE)) {
            event.stopPropagation();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.filteredReturn.emit(this.array);
    }
}
MatSelectFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-select-filter',
                template: `
  <form [formGroup]="searchForm" class="mat-filter" [ngStyle]="{'background-color': color ? color : 'white'}">
  <div>
  <input #input class="mat-filter-input" matInput placeholder="{{placeholder}}" formControlName="value" (keydown)="handleKeydown($event)">
    <mat-spinner *ngIf="localSpinner" class="spinner" diameter="16"></mat-spinner>
  </div>
  <div *ngIf="noResults"
     class="noResultsMessage">
  {{noResultsMessage}}
</div>
</form>
  `,
                styles: [".mat-filter{position:-webkit-sticky;position:sticky;top:0;z-index:100;font-size:inherit;box-shadow:none;border-radius:0;padding:16px;box-sizing:border-box;border-bottom:1px solid grey}.mat-filter-input{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;border:0;background-color:unset;color:gray;width:100%}.spinner{position:absolute;right:16px;top:calc(50% - 8px)}.noResultsMessage{margin-top:10px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:16px}"]
            }] }
];
/** @nocollapse */
MatSelectFilterComponent.ctorParameters = () => [
    { type: FormBuilder }
];
MatSelectFilterComponent.propDecorators = {
    input: [{ type: ViewChild, args: ['input', { static: true },] }],
    array: [{ type: Input, args: ['array',] }],
    placeholder: [{ type: Input, args: ['placeholder',] }],
    color: [{ type: Input, args: ['color',] }],
    displayMember: [{ type: Input, args: ['displayMember',] }],
    showSpinner: [{ type: Input, args: ['showSpinner',] }],
    noResultsMessage: [{ type: Input, args: ['noResultsMessage',] }],
    hasGroup: [{ type: Input, args: ['hasGroup',] }],
    groupArrayName: [{ type: Input, args: ['groupArrayName',] }],
    filteredReturn: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MatSelectFilterComponent.prototype.input;
    /** @type {?} */
    MatSelectFilterComponent.prototype.array;
    /** @type {?} */
    MatSelectFilterComponent.prototype.placeholder;
    /** @type {?} */
    MatSelectFilterComponent.prototype.color;
    /** @type {?} */
    MatSelectFilterComponent.prototype.displayMember;
    /** @type {?} */
    MatSelectFilterComponent.prototype.showSpinner;
    /** @type {?} */
    MatSelectFilterComponent.prototype.noResultsMessage;
    /** @type {?} */
    MatSelectFilterComponent.prototype.hasGroup;
    /** @type {?} */
    MatSelectFilterComponent.prototype.groupArrayName;
    /** @type {?} */
    MatSelectFilterComponent.prototype.noResults;
    /** @type {?} */
    MatSelectFilterComponent.prototype.localSpinner;
    /** @type {?} */
    MatSelectFilterComponent.prototype.filteredReturn;
    /** @type {?} */
    MatSelectFilterComponent.prototype.filteredItems;
    /** @type {?} */
    MatSelectFilterComponent.prototype.searchForm;
}
//# sourceMappingURL=data:application/json;base64,