{"version":3,"sources":["ng://mat-select-filter/lib/mat-select-filter.service.ts","ng://mat-select-filter/lib/mat-select-filter.component.ts","ng://mat-select-filter/lib/mat-select-filter.module.ts"],"names":["MatSelectFilterService","Injectable","args","providedIn","MatSelectFilterComponent","fb","this","showSpinner","noResultsMessage","noResults","localSpinner","filteredReturn","EventEmitter","filteredItems","searchForm","group","value","prototype","ngOnInit","_this","valueChanges","subscribe","displayMember","array","filter","name","toLowerCase","includes","hasGroup","groupArrayName","map","a","objCopy","Object","assign","g","x","length","slice","emit","setTimeout","input","nativeElement","focus","placeholder","handleKeydown","event","key","keyCode","A","Z","ZERO","NINE","SPACE","stopPropagation","ngOnDestroy","Component","selector","template","FormBuilder","ViewChild","static","Input","Output","MatSelectFilterModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatProgressSpinnerModule","exports"],"mappings":"ilBAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WA6CE,SAAAA,EAAYC,GAbUC,KAAAC,aAAc,EACTD,KAAAE,iBAAmB,aAI9CF,KAAAG,WAAY,EAEZH,KAAAI,cAAe,EACLJ,KAAAK,eAAiB,IAAIC,EAAAA,aAExBN,KAAAO,cAAqB,GAI1BP,KAAKQ,WAAaT,EAAGU,MAAM,CACzBC,MAAO,KA4Db,OAxDEZ,EAAAa,UAAAC,SAAA,WAAA,IAAAC,EAAAb,KACEA,KAAKQ,WAAWM,aAAaC,UAAS,SAACL,GACjCG,EAAKZ,cACPY,EAAKT,cAAe,GAElBM,EAAa,OAEW,MAAtBG,EAAKG,cACPH,EAAKN,cAAgBM,EAAKI,MAAMC,OAAM,SAACC,GAAQ,OAAAA,EAAKC,cAAcC,SAASX,EAAa,MAAEU,iBAEjFP,EAAKS,UAAYT,EAAKU,gBAAkBV,EAAKG,cACtDH,EAAKN,cAAgBM,EAAKI,MAAMO,IAAG,SAACC,OAC5BC,EAAUC,OAAOC,OAAO,GAAIH,GAElC,OADAC,EAAQb,EAAKU,gBAAkBG,EAAQb,EAAKU,gBAAgBL,OAAM,SAACW,GAAK,OAAAA,EAAEhB,EAAKG,eAAeI,cAAcC,SAASX,EAAa,MAAEU,iBAC7HM,IACNR,OAAM,SAACY,GAAK,OAAAA,EAAEjB,EAAKU,gBAAgBQ,OAAS,IAE/ClB,EAAKN,cAAgBM,EAAKI,MAAMC,OAAM,SAACC,GAAQ,OAAAA,EAAKN,EAAKG,eAAeI,cAAcC,SAASX,EAAa,MAAEU,iBAIhHP,EAAKV,UAAkC,MAAtBU,EAAKN,eAAuD,IAA9BM,EAAKN,cAAcwB,SAIlElB,EAAKN,cAAgBM,EAAKI,MAAMe,QAChCnB,EAAKV,WAAY,GAEnBU,EAAKR,eAAe4B,KAAKpB,EAAKN,eAC9B2B,WAAU,WACJrB,EAAKZ,cACPY,EAAKT,cAAe,IAErB,OAGL8B,WAAU,WACRrB,EAAKsB,MAAMC,cAAcC,SACxB,KACErC,KAAKsC,cACRtC,KAAKsC,YAAc,cAIvBxC,EAAAa,UAAA4B,cAAA,SAAcC,IAEPA,EAAMC,KAA4B,IAArBD,EAAMC,IAAIV,QACzBS,EAAME,SAAWC,EAAAA,GAAKH,EAAME,SAAWE,EAAAA,GACvCJ,EAAME,SAAWG,EAAAA,MAAQL,EAAME,SAAWI,EAAAA,MAC1CN,EAAME,UAAYK,EAAAA,QACnBP,EAAMQ,mBAGVlD,EAAAa,UAAAsC,YAAA,WACEjD,KAAKK,eAAe4B,KAAKjC,KAAKiB,4BAhGjCiC,EAAAA,UAAStD,KAAA,CAAC,CACTuD,SAAU,oBACVC,SAAU,2+BAVQC,EAAAA,8CAyBjBC,EAAAA,UAAS1D,KAAA,CAAC,QAAS,CAAE2D,QAAQ,mBAE7BC,EAAAA,MAAK5D,KAAA,CAAC,8BACN4D,EAAAA,MAAK5D,KAAA,CAAC,8BACN4D,EAAAA,MAAK5D,KAAA,CAAC,gCACN4D,EAAAA,MAAK5D,KAAA,CAAC,sCACN4D,EAAAA,MAAK5D,KAAA,CAAC,yCACN4D,EAAAA,MAAK5D,KAAA,CAAC,sCACN4D,EAAAA,MAAK5D,KAAA,CAAC,oCACN4D,EAAAA,MAAK5D,KAAA,CAAC,0CAKN6D,EAAAA,UAmEH3D,EA3GA,GCAA4D,EAAA,WAKA,SAAAA,KAUqC,2BAVpCC,EAAAA,SAAQ/D,KAAA,CAAC,CACRgE,aAAc,CAAC9D,GACf+D,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,0BAEFC,QAAS,CAACpE,OAEyB4D,EAfrC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatSelectFilterService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport {\n  A,\n  Z,\n  ZERO,\n  NINE,\n  SPACE, END, HOME,\n} from '@angular/cdk/keycodes';\n@Component({\n  selector: 'mat-select-filter',\n  template: `\n  <form [formGroup]=\"searchForm\" class=\"mat-filter\" [ngStyle]=\"{'background-color': color ? color : 'white'}\">\n  <div>\n  <input #input class=\"mat-filter-input\" matInput placeholder=\"{{placeholder}}\" formControlName=\"value\" (keydown)=\"handleKeydown($event)\">\n    <mat-spinner *ngIf=\"localSpinner\" class=\"spinner\" diameter=\"16\"></mat-spinner>\n  </div>\n  <div *ngIf=\"noResults\"\n     class=\"noResultsMessage\">\n  {{noResultsMessage}}\n</div>\n</form>\n  `,\n  styleUrls: ['./mat-select-filter.component.scss']\n})\nexport class MatSelectFilterComponent implements OnInit, OnDestroy {\n  @ViewChild('input', { static: true }) input;\n\n  @Input('array') array: any;\n  @Input('placeholder') placeholder: string;\n  @Input('color') color: string;\n  @Input('displayMember') displayMember: string;\n  @Input('showSpinner') showSpinner = true;\n  @Input('noResultsMessage') noResultsMessage = 'No results';\n  @Input('hasGroup') hasGroup: boolean;\n  @Input('groupArrayName') groupArrayName: string;\n\n  noResults = false;\n\n  localSpinner = false;\n  @Output() filteredReturn = new EventEmitter<any>();\n\n  public filteredItems: any = [];\n  public searchForm: FormGroup;\n\n  constructor(fb: FormBuilder) {\n    this.searchForm = fb.group({\n      value: ''\n    });\n  }\n\n  ngOnInit() {\n    this.searchForm.valueChanges.subscribe(value => {\n      if (this.showSpinner) {\n        this.localSpinner = true;\n      }\n      if (value['value']) {\n        // IF THE DISPLAY MEMBER INPUT IS SET WE CHECK THE SPECIFIC PROPERTY\n        if (this.displayMember == null) {\n          this.filteredItems = this.array.filter(name => name.toLowerCase().includes(value['value'].toLowerCase()));\n          // OTHERWISE, WE CHECK THE ENTIRE STRING\n        } else if (this.hasGroup && this.groupArrayName && this.displayMember) {\n          this.filteredItems = this.array.map(a => {\n            const objCopy = Object.assign({}, a);\n            objCopy[this.groupArrayName] = objCopy[this.groupArrayName].filter(g => g[this.displayMember].toLowerCase().includes(value['value'].toLowerCase()));\n            return objCopy;\n          }).filter(x => x[this.groupArrayName].length > 0);\n        } else {\n          this.filteredItems = this.array.filter(name => name[this.displayMember].toLowerCase().includes(value['value'].toLowerCase()));\n        }\n        // NO RESULTS VALIDATION\n\n        this.noResults = this.filteredItems == null || this.filteredItems.length === 0;\n\n\n      } else {\n        this.filteredItems = this.array.slice();\n        this.noResults = false;\n      }\n      this.filteredReturn.emit(this.filteredItems);\n      setTimeout(() => {\n        if (this.showSpinner) {\n          this.localSpinner = false;\n        }\n      }, 2000);\n    });\n\n    setTimeout(() => {\n      this.input.nativeElement.focus();\n    }, 500);\n    if (!this.placeholder) {\n      this.placeholder = 'Search...';\n    }\n  }\n\n  handleKeydown(event: KeyboardEvent) {\n    // PREVENT PROPAGATION FOR ALL ALPHANUMERIC CHARACTERS IN ORDER TO AVOID SELECTION ISSUES\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)) {\n      event.stopPropagation();\n    }\n  }\n  ngOnDestroy() {\n    this.filteredReturn.emit(this.array);\n  }\n}\n","import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectFilterComponent } from './mat-select-filter.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [MatSelectFilterComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [MatSelectFilterComponent]\n})\nexport class MatSelectFilterModule { }\n"]}