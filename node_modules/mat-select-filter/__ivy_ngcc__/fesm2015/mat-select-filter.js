import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { A, Z, ZERO, NINE, SPACE } from '@angular/cdk/keycodes';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/progress-spinner';

const _c0 = ["input"];
function MatSelectFilterComponent_mat_spinner_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-spinner", 5);
} }
function MatSelectFilterComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.noResultsMessage, "\n");
} }
const _c1 = function (a0) { return { "background-color": a0 }; };
class MatSelectFilterService {
    constructor() { }
}
MatSelectFilterService.ɵfac = function MatSelectFilterService_Factory(t) { return new (t || MatSelectFilterService)(); };
MatSelectFilterService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSelectFilterService, factory: MatSelectFilterService.ɵfac, providedIn: 'root' });
/** @nocollapse */
MatSelectFilterService.ctorParameters = () => [];
/** @nocollapse */ MatSelectFilterService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSelectFilterService_Factory() { return new MatSelectFilterService(); }, token: MatSelectFilterService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatSelectFilterComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.showSpinner = true;
        this.noResultsMessage = 'No results';
        this.noResults = false;
        this.localSpinner = false;
        this.filteredReturn = new EventEmitter();
        this.filteredItems = [];
        this.searchForm = fb.group({
            value: ''
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.searchForm.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (this.showSpinner) {
                this.localSpinner = true;
            }
            if (value['value']) {
                // IF THE DISPLAY MEMBER INPUT IS SET WE CHECK THE SPECIFIC PROPERTY
                if (this.displayMember == null) {
                    this.filteredItems = this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    name => name.toLowerCase().includes(value['value'].toLowerCase())));
                    // OTHERWISE, WE CHECK THE ENTIRE STRING
                }
                else if (this.hasGroup && this.groupArrayName && this.displayMember) {
                    this.filteredItems = this.array.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const objCopy = Object.assign({}, a);
                        objCopy[this.groupArrayName] = objCopy[this.groupArrayName].filter((/**
                         * @param {?} g
                         * @return {?}
                         */
                        g => g[this.displayMember].toLowerCase().includes(value['value'].toLowerCase())));
                        return objCopy;
                    })).filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x[this.groupArrayName].length > 0));
                }
                else {
                    this.filteredItems = this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    name => name[this.displayMember].toLowerCase().includes(value['value'].toLowerCase())));
                }
                // NO RESULTS VALIDATION
                this.noResults = this.filteredItems == null || this.filteredItems.length === 0;
            }
            else {
                this.filteredItems = this.array.slice();
                this.noResults = false;
            }
            this.filteredReturn.emit(this.filteredItems);
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.showSpinner) {
                    this.localSpinner = false;
                }
            }), 2000);
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.input.nativeElement.focus();
        }), 500);
        if (!this.placeholder) {
            this.placeholder = 'Search...';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeydown(event) {
        // PREVENT PROPAGATION FOR ALL ALPHANUMERIC CHARACTERS IN ORDER TO AVOID SELECTION ISSUES
        if ((event.key && event.key.length === 1) ||
            (event.keyCode >= A && event.keyCode <= Z) ||
            (event.keyCode >= ZERO && event.keyCode <= NINE) ||
            (event.keyCode === SPACE)) {
            event.stopPropagation();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.filteredReturn.emit(this.array);
    }
}
MatSelectFilterComponent.ɵfac = function MatSelectFilterComponent_Factory(t) { return new (t || MatSelectFilterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder)); };
MatSelectFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelectFilterComponent, selectors: [["mat-select-filter"]], viewQuery: function MatSelectFilterComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { showSpinner: "showSpinner", noResultsMessage: "noResultsMessage", placeholder: "placeholder", array: "array", color: "color", displayMember: "displayMember", hasGroup: "hasGroup", groupArrayName: "groupArrayName" }, outputs: { filteredReturn: "filteredReturn" }, decls: 6, vars: 7, consts: [[1, "mat-filter", 3, "formGroup", "ngStyle"], ["matInput", "", "formControlName", "value", 1, "mat-filter-input", 3, "placeholder", "keydown"], ["input", ""], ["class", "spinner", "diameter", "16", 4, "ngIf"], ["class", "noResultsMessage", 4, "ngIf"], ["diameter", "16", 1, "spinner"], [1, "noResultsMessage"]], template: function MatSelectFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "input", 1, 2);
        ɵngcc0.ɵɵlistener("keydown", function MatSelectFilterComponent_Template_input_keydown_2_listener($event) { return ctx.handleKeydown($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, MatSelectFilterComponent_mat_spinner_4_Template, 1, 0, "mat-spinner", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, MatSelectFilterComponent_div_5_Template, 2, 1, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.searchForm)("ngStyle", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx.color ? ctx.color : "white"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.localSpinner);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.noResults);
    } }, directives: [ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc2.NgStyle, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc2.NgIf, ɵngcc3.MatSpinner], styles: [".mat-filter[_ngcontent-%COMP%]{position:-webkit-sticky;position:sticky;top:0;z-index:100;font-size:inherit;box-shadow:none;border-radius:0;padding:16px;box-sizing:border-box;border-bottom:1px solid grey}.mat-filter-input[_ngcontent-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;border:0;background-color:unset;color:gray;width:100%}.spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}.noResultsMessage[_ngcontent-%COMP%]{margin-top:10px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:16px}"] });
/** @nocollapse */
MatSelectFilterComponent.ctorParameters = () => [
    { type: FormBuilder }
];
MatSelectFilterComponent.propDecorators = {
    input: [{ type: ViewChild, args: ['input', { static: true },] }],
    array: [{ type: Input, args: ['array',] }],
    placeholder: [{ type: Input, args: ['placeholder',] }],
    color: [{ type: Input, args: ['color',] }],
    displayMember: [{ type: Input, args: ['displayMember',] }],
    showSpinner: [{ type: Input, args: ['showSpinner',] }],
    noResultsMessage: [{ type: Input, args: ['noResultsMessage',] }],
    hasGroup: [{ type: Input, args: ['hasGroup',] }],
    groupArrayName: [{ type: Input, args: ['groupArrayName',] }],
    filteredReturn: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectFilterComponent, [{
        type: Component,
        args: [{
                selector: 'mat-select-filter',
                template: `
  <form [formGroup]="searchForm" class="mat-filter" [ngStyle]="{'background-color': color ? color : 'white'}">
  <div>
  <input #input class="mat-filter-input" matInput placeholder="{{placeholder}}" formControlName="value" (keydown)="handleKeydown($event)">
    <mat-spinner *ngIf="localSpinner" class="spinner" diameter="16"></mat-spinner>
  </div>
  <div *ngIf="noResults"
     class="noResultsMessage">
  {{noResultsMessage}}
</div>
</form>
  `,
                styles: [".mat-filter{position:-webkit-sticky;position:sticky;top:0;z-index:100;font-size:inherit;box-shadow:none;border-radius:0;padding:16px;box-sizing:border-box;border-bottom:1px solid grey}.mat-filter-input{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;border:0;background-color:unset;color:gray;width:100%}.spinner{position:absolute;right:16px;top:calc(50% - 8px)}.noResultsMessage{margin-top:10px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:16px}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }]; }, { showSpinner: [{
            type: Input,
            args: ['showSpinner']
        }], noResultsMessage: [{
            type: Input,
            args: ['noResultsMessage']
        }], filteredReturn: [{
            type: Output
        }], placeholder: [{
            type: Input,
            args: ['placeholder']
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], array: [{
            type: Input,
            args: ['array']
        }], color: [{
            type: Input,
            args: ['color']
        }], displayMember: [{
            type: Input,
            args: ['displayMember']
        }], hasGroup: [{
            type: Input,
            args: ['hasGroup']
        }], groupArrayName: [{
            type: Input,
            args: ['groupArrayName']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatSelectFilterModule {
}
MatSelectFilterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectFilterModule });
MatSelectFilterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectFilterModule_Factory(t) { return new (t || MatSelectFilterModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            MatProgressSpinnerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectFilterModule, { declarations: function () { return [MatSelectFilterComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        MatProgressSpinnerModule]; }, exports: function () { return [MatSelectFilterComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectFilterModule, [{
        type: NgModule,
        args: [{
                declarations: [MatSelectFilterComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatProgressSpinnerModule
                ],
                exports: [MatSelectFilterComponent]
            }]
    }], null, null); })();

export { MatSelectFilterComponent, MatSelectFilterModule, MatSelectFilterService };

//# sourceMappingURL=mat-select-filter.js.map