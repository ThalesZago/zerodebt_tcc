import { ɵɵdefineInjectable, Injectable, Component, ViewChild, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { A, Z, ZERO, NINE, SPACE } from '@angular/cdk/keycodes';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatSelectFilterService = /** @class */ (function () {
    function MatSelectFilterService() {
    }
    MatSelectFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    MatSelectFilterService.ctorParameters = function () { return []; };
    /** @nocollapse */ MatSelectFilterService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSelectFilterService_Factory() { return new MatSelectFilterService(); }, token: MatSelectFilterService, providedIn: "root" });
    return MatSelectFilterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatSelectFilterComponent = /** @class */ (function () {
    function MatSelectFilterComponent(fb) {
        this.showSpinner = true;
        this.noResultsMessage = 'No results';
        this.noResults = false;
        this.localSpinner = false;
        this.filteredReturn = new EventEmitter();
        this.filteredItems = [];
        this.searchForm = fb.group({
            value: ''
        });
    }
    /**
     * @return {?}
     */
    MatSelectFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.searchForm.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.showSpinner) {
                _this.localSpinner = true;
            }
            if (value['value']) {
                // IF THE DISPLAY MEMBER INPUT IS SET WE CHECK THE SPECIFIC PROPERTY
                if (_this.displayMember == null) {
                    _this.filteredItems = _this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    function (name) { return name.toLowerCase().includes(value['value'].toLowerCase()); }));
                    // OTHERWISE, WE CHECK THE ENTIRE STRING
                }
                else if (_this.hasGroup && _this.groupArrayName && _this.displayMember) {
                    _this.filteredItems = _this.array.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) {
                        /** @type {?} */
                        var objCopy = Object.assign({}, a);
                        objCopy[_this.groupArrayName] = objCopy[_this.groupArrayName].filter((/**
                         * @param {?} g
                         * @return {?}
                         */
                        function (g) { return g[_this.displayMember].toLowerCase().includes(value['value'].toLowerCase()); }));
                        return objCopy;
                    })).filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return x[_this.groupArrayName].length > 0; }));
                }
                else {
                    _this.filteredItems = _this.array.filter((/**
                     * @param {?} name
                     * @return {?}
                     */
                    function (name) { return name[_this.displayMember].toLowerCase().includes(value['value'].toLowerCase()); }));
                }
                // NO RESULTS VALIDATION
                _this.noResults = _this.filteredItems == null || _this.filteredItems.length === 0;
            }
            else {
                _this.filteredItems = _this.array.slice();
                _this.noResults = false;
            }
            _this.filteredReturn.emit(_this.filteredItems);
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.showSpinner) {
                    _this.localSpinner = false;
                }
            }), 2000);
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.input.nativeElement.focus();
        }), 500);
        if (!this.placeholder) {
            this.placeholder = 'Search...';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatSelectFilterComponent.prototype.handleKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // PREVENT PROPAGATION FOR ALL ALPHANUMERIC CHARACTERS IN ORDER TO AVOID SELECTION ISSUES
        if ((event.key && event.key.length === 1) ||
            (event.keyCode >= A && event.keyCode <= Z) ||
            (event.keyCode >= ZERO && event.keyCode <= NINE) ||
            (event.keyCode === SPACE)) {
            event.stopPropagation();
        }
    };
    /**
     * @return {?}
     */
    MatSelectFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.filteredReturn.emit(this.array);
    };
    MatSelectFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-select-filter',
                    template: "\n  <form [formGroup]=\"searchForm\" class=\"mat-filter\" [ngStyle]=\"{'background-color': color ? color : 'white'}\">\n  <div>\n  <input #input class=\"mat-filter-input\" matInput placeholder=\"{{placeholder}}\" formControlName=\"value\" (keydown)=\"handleKeydown($event)\">\n    <mat-spinner *ngIf=\"localSpinner\" class=\"spinner\" diameter=\"16\"></mat-spinner>\n  </div>\n  <div *ngIf=\"noResults\"\n     class=\"noResultsMessage\">\n  {{noResultsMessage}}\n</div>\n</form>\n  ",
                    styles: [".mat-filter{position:-webkit-sticky;position:sticky;top:0;z-index:100;font-size:inherit;box-shadow:none;border-radius:0;padding:16px;box-sizing:border-box;border-bottom:1px solid grey}.mat-filter-input{-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;border:0;background-color:unset;color:gray;width:100%}.spinner{position:absolute;right:16px;top:calc(50% - 8px)}.noResultsMessage{margin-top:10px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:16px}"]
                }] }
    ];
    /** @nocollapse */
    MatSelectFilterComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    MatSelectFilterComponent.propDecorators = {
        input: [{ type: ViewChild, args: ['input', { static: true },] }],
        array: [{ type: Input, args: ['array',] }],
        placeholder: [{ type: Input, args: ['placeholder',] }],
        color: [{ type: Input, args: ['color',] }],
        displayMember: [{ type: Input, args: ['displayMember',] }],
        showSpinner: [{ type: Input, args: ['showSpinner',] }],
        noResultsMessage: [{ type: Input, args: ['noResultsMessage',] }],
        hasGroup: [{ type: Input, args: ['hasGroup',] }],
        groupArrayName: [{ type: Input, args: ['groupArrayName',] }],
        filteredReturn: [{ type: Output }]
    };
    return MatSelectFilterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatSelectFilterModule = /** @class */ (function () {
    function MatSelectFilterModule() {
    }
    MatSelectFilterModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [MatSelectFilterComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MatProgressSpinnerModule
                    ],
                    exports: [MatSelectFilterComponent]
                },] }
    ];
    return MatSelectFilterModule;
}());

export { MatSelectFilterComponent, MatSelectFilterModule, MatSelectFilterService };
//# sourceMappingURL=mat-select-filter.js.map
